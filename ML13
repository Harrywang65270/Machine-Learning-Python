#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Jan  8 13:13:57 2018

@author: wanghaigang
"""

import numpy as np
import pandas as pd

from sklearn.preprocessing import Imputer
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report 

"""

导入numpy库和pandas库
从sklearn库中导入预处理模块Imputer
导入自动生成训练集和测试集的模块train_test_split
导入预测结果评估模块classification_report 

"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.naive_bayes import GaussianNB

def load_dataset(feature_paths, label_paths):
    """ 读取特征文件列表和标签文件列表中的内容，归并后返回
    """
    feature = np.ndarray(shape=(0,41))
    label = np.ndarray(shape=(0,1))
    
    for file in feature_paths:
        df = pd.read_table(file, delimiter=',',na_values='?',header=None)
        imp = Imputer(missing_values='NaN',strategy='mean',axis=0)
        imp.fit(df)
        df = imp.transform(df)
        feature = np.concatenate((feature,df))
        
    for file in label_paths:
    # 读取标签数据，文件中不包含表头
        df = pd.read_table(file, header=None)
    # 将新读入的数据合并到标签集合中
        label = np.concatenate((label, df))
        
    label = np.ravel(label)
    return feature, label

if __name__ == '__main__':
    feature_paths = []
    label_paths = []
    
    x_train, y_train = load_dataset(feature_paths[:4],label_paths[:4])
    x_test, y_test = load_dataset(feature_paths[4:], label_paths[4:])
    
    x_train, x_, y_train, y_ = train_test_split(x_train, y_train, test_size = 0.0)
    
    
    print("Start training knn")
    knn = KNeighborsClassifier().fit(x_train,y_train)
    print("Training done!")
    answer_knn = knn.predict(x_test)
    print("Prediction done!")
    
    
    
    print("Start training DT")
    dt = DecisionTreeClassifier().fit(x_train, y_train)
    print("Training done!")
    answer_dt = dt.predict(x_test)
    print("Prediction done!")
    
    
    print("Start training Bayes")
    gnb = GaussianNB().fit(x_train, y_train)
    print("Training done!")
    answer_gnb = gnb.predict(x_test)
    print("Prediction done!")
        
    
